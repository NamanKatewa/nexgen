generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum USER_ROLE {
  Client
  Admin
  Employee
}

enum USER_STATUS {
  Active
  Inactive
}

enum KYC_STATUS {
  Pending
  Submitted
  Approved
  Rejected
}

enum TRANSACTION_TYPE {
  Credit
  Debit
}

enum PAYMENT_STATUS {
  Pending
  Completed
  Failed
}

enum CARRIER_STATUS {
  Active
  Inactive
}

enum ORDER_PAYMENT_STATUS {
  Pending
  Paid
}

enum ORDER_STATUS {
  PendingApproval
  Approved
  Rejected
}

enum SUPPORT_STATUS {
  Open
  Closed
}

enum SUPPORT_PRIORITY {
  High
  Medium
  Low
}

enum EMPLOYEE_STATUS {
  Active
  Inactive
}

enum SHIPMENT_STATUS {
  Booked
  InTransit
}

enum BUSINESS_TYPE {
  Retailer
  Ecommerce
  Franchise
}

enum ENTITY_TYPE {
  Individual
  SelfEmployement
  ProprietorshipFirm
  LimitedLiabilityParternship
  PrivateLimitedCompany
  PublicLimitedCompany
  PartnershipFirm
}

enum ADDRESS_TYPE {
  User
  Warehouse
}

model User {
  user_id       String        @id @default(uuid())
  email         String        @unique
  mobile_number String
  password_hash String
  name          String
  company_name  String
  monthly_order String
  business_type BUSINESS_TYPE
  role          USER_ROLE     @default(Client)
  status        USER_STATUS   @default(Active)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  kyc          Kyc?
  wallet       Wallet?
  orders       Order[]
  transactions Transaction[]
  tickets      SupportTicket[]
  employee     Employee?
  verifiedKYCs Kyc[]           @relation("VerifiedByAdmin")
  addresses       Address[]
  userRates       UserRate[]
  pendingAddresses PendingAddress[]
}

model DefaultRate {
  default_rate_id          String   @id @default(uuid())
  zone_from   String
  zone_to     String
  weight_slab Float
  rate        Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([zone_from, zone_to, weight_slab])
}

model UserRate {
  user_rate_id          String   @id @default(uuid())
  user_id     String
  zone_from   String
  zone_to     String
  weight_slab Float
  rate        Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, zone_from, zone_to, weight_slab])
}

model Address {
  address_id            String     @id @default(uuid())
  zip_code              Int
  city                  String
  state                 String
  address_line          String
  name                  String
  type                  ADDRESS_TYPE
  user_id               String

  kyc                   Kyc?
  origin_shipments      Shipment[] @relation("Origin")
  destination_shipments Shipment[] @relation("Destination")
  user                  User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Kyc {
  kyc_id              String      @id @default(uuid())
  user_id             String      @unique
  entity_name         String?
  entity_type         ENTITY_TYPE?
  website_url         String?
  address_id          String?     @unique
  aadhar_number       String?
  aadhar_image_front  String?
  aadhar_image_back   String?
  pan_number          String?
  pan_image_front     String?
  pan_image_back      String?
  gst                 Boolean     @default(false)
  kyc_status          KYC_STATUS  @default(Pending)
  submission_date     DateTime?
  verification_date   DateTime?
  verified_by_user_id String?
  rejection_reason    String?

  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  address     Address? @relation(fields: [address_id], references: [address_id])
  verified_by User?    @relation("VerifiedByAdmin", fields: [verified_by_user_id], references: [user_id])
}

model Wallet {
  wallet_id    String        @id @default(uuid())
  user_id      String        @unique
  balance      Decimal       @db.Decimal(10, 2)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  user         User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Transaction {
  transaction_id   String           @id @default(uuid())
  user_id          String
  transaction_type TRANSACTION_TYPE
  amount           Decimal          @db.Decimal(10, 2)
  payment_status   PAYMENT_STATUS
  order_id         String?          @unique
  description      String?
  created_at       DateTime         @default(now())

  user   User   @relation(fields: [user_id], references: [user_id],onDelete: Cascade)
  order  Order? @relation(fields: [order_id], references: [order_id])
}

model Order {
  order_id         String               @id @default(uuid())
  user_id          String
  total_amount     Decimal              @db.Decimal(10, 2)
  payment_status   ORDER_PAYMENT_STATUS
  order_status     ORDER_STATUS
  rejection_reason String?
  created_at       DateTime             @default(now())
  updated_at       DateTime             @updatedAt

  user        User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  shipments   Shipment[]
  transaction Transaction?
}

model Shipment {
  shipment_id            String          @id @default(uuid())
  human_readable_shipment_id String          @unique
  order_id               String
  carrier_id             String?
  awb_lr_no              String?          @unique
  current_status         SHIPMENT_STATUS
  origin_address_id      String
  destination_address_id String
  recipient_name         String
  recipient_mobile       String
  package_image_url      String
  package_weight         Decimal         @db.Decimal(10, 2)
  package_dimensions     String
  shipping_cost          Decimal         @db.Decimal(10, 2)
  label_url              String?
  declared_value        Decimal? @db.Decimal(10, 2)
  is_insurance_selected Boolean  @default(false)
  insurance_premium     Decimal? @db.Decimal(10, 2)
  compensation_amount   Decimal? @db.Decimal(10, 2)
  invoiceUrl            String?
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt

  order               Order    @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  origin_address      Address  @relation("Origin", fields: [origin_address_id], references: [address_id])
  destination_address Address  @relation("Destination", fields: [destination_address_id], references: [address_id])
  tracking            Tracking[]
}

model Tracking {
  tracking_id        String   @id @default(uuid())
  shipment_id        String
  timestamp          DateTime
  location           String
  status_description String
  carrier_update_code String
  event_details      String

  shipment Shipment @relation(fields: [shipment_id], references: [shipment_id], onDelete: Cascade)
}

model SupportTicket {
  ticket_id               String           @id @default(uuid())
  user_id                 String
  subject                 String
  description             String
  status                  SUPPORT_STATUS
  priority                SUPPORT_PRIORITY
  assigned_to_employee_id String?
  created_at              DateTime         @default(now())
  updated_at              DateTime         @updatedAt
  resolved_at             DateTime?

  user        User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  assigned_to Employee? @relation(fields: [assigned_to_employee_id], references: [employee_id])
}

model Employee {
  employee_id   String          @id @default(uuid())
  user_id       String          @unique
  employee_code String
  designation   String
  department    String
  hire_date     DateTime
  status        EMPLOYEE_STATUS

  user    User            @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  tickets SupportTicket[]
}

model PendingAddress {
  pending_address_id String   @id @default(uuid())
  zip_code           Int
  city               String
  state              String
  address_line       String
  name               String
  user_id            String
  is_approved        Boolean  @default(false)
  created_at         DateTime @default(now())

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model PasswordReset {
  reset_id  String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}